handleGenerateNewShortUrl ---> controllers ---> url.js
handleGetAnalytics ---> controllers ---> url.js

Data schema setup ---> models ---> url.js

"/", "/analytics/:shortid" ----> routes ---> url.js

using "shortid() npm package" for shorturl generation

view folder ---> to create EJS files (html files) ----> ".ejs"
----------------------------------------------------------------------------------------------------------------------

SERVER-SIDE Rendering with EJS

when our html/web page is rendered from server ---> it is Server side rendering.
simple terms, html code written in javascript file. 
example:- app.get('/test', (req, res) => {
    return res.send("<h1> hey from server </h1>");
})
Makes Nodejs code messy and unreadable with all the HTML Code.
so, use EJS -- Embedded JavaScript Templating
EJS makes server side rendering easy.

res.render("file_name_in_ejs_folder")

--------------------------------------------------------------------------------------------------------------------------
AUTHENTICATION Patterns
Stateless ---> which has no State
STATEFULL ---> which maintains a State
when client sends request to server, server issues a unique id which is called session uid for further authentication.
uid is transferred through cookies, response, headers.
client ----> Auth middleware -----> endpoint route
authmiddleware checks for cookie value/uid, if valid calls next() else request rejected.

Statefull authentication
--> memory intensive --> uses server memory to store the state which is limited.
--> to solve this we have "STATELSS authentication"

Stateless authentication
--> state removed from server
--> id/token made for user, includes the data which was supposed to be stored in server [Statefull].
--> further the token is locked, so that one can read it but cant change it.
[car Parking token, currency]
We use "JWT tokens" for this.

JSON WEB TOKEN:
3 integrations --> header, payload, verify signature.
every payload has a unique token, a token can be used to access the payload/data mapped to that token.
token is an encoded/encrypted form of a payload data.
decode token ---> payload/data.
encode payload/data ---> token generated.

Never leak your TOKENS!!**
--------------------------------------------------------------------------------------------------------------------------
COOKIE Concept:

client ---- user/pass ------> server ---- check with DB
if user/pass is correct/valid, server generates JWT token.
this token is stored in a COOKIE with a "uid".
this cookie is given to client.
Now, whenever client sends any request to server, the browser also sends the cookie along the request.
Now, server checks for uid cookie, if not present --> user logged out.
if request has the uid cookie ---> it picks cookieValue/token ---> validates if the token is server-generated or not.
if yes, then user is also valid, and user info is extracted from the token.

COOKIES --- domain specific
cookies go back to the domain, for which server created them
cookies are secure by default.
limited till browser only.
cookie is a browser-feature.

res.cookie(name, value[, options])

property(type) ---> description

domain(string) ---> domain name for the cookie, defaults to the domain name of the app.
encode(function) ---> synch function used for cookie value encoding, defaults to encodeURIComponent.
expires(date) ---> expiry date of cookie in GMT. if not specified or set to 0, creates a session cookie.
httpOnly(Boolean) ---> flags the cookie to be accessible only by web server.
signed(boolean) ---> indicates if cookie should be signed.
secure(booolean) ---> marks the cookie to be used with https only.
path(string) ---> path for the cookie, defaults to "/". 

Authorizaton header
Authorizaton: Bearer <token>
server reads the above header, removes Bearer and validates <token>.

cookie - auto, only valid for browser.
headers - send token in form of JSON.
when user requests we send header "Authorizaton: Bearer <token>"
user extracts the token by removing bearer term.
Bearer authentication --- token authentication --- http authentication scheme.
use Authorizatonas header name. (standard)
--------------------------------------------------------------------------------------------------------------------------